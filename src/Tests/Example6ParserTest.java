package Tests;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.LinkedList;
import AST.*;
import Tran.*;
public class Example6ParserTest {

	@Test
	public void Example6ParserTestTest() throws Exception {
		var tokens = new LinkedList<Token>();
		tokens.add(new Token(Token.TokenTypes.CLASS, 1, 5));
		tokens.add(new Token(Token.TokenTypes.WORD, 1, 14, "Example6"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 2, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 2, 4));
		tokens.add(new Token(Token.TokenTypes.SHARED, 2, 10));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 17, "square"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 2, 18));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 24, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 26, "x"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 2, 27));
		tokens.add(new Token(Token.TokenTypes.COLON, 2, 29));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 36, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 38, "s"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 3, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 3, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 3, 9, "s"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 3, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 3, 13, "x"));
		tokens.add(new Token(Token.TokenTypes.TIMES, 3, 15));
		tokens.add(new Token(Token.TokenTypes.WORD, 3, 17, "x"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 4, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 4, 4));
		tokens.add(new Token(Token.TokenTypes.PRIVATE, 4, 11));
		tokens.add(new Token(Token.TokenTypes.SHARED, 4, 18));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 24, "start"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 4, 25));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 4, 26));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 5, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 5, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 14, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 16, "t"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 6, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 6, 9, "t"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 6, 11));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 6, 16, "3.07"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 7, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 9, "t"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 7, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 20, "Example6"));
		tokens.add(new Token(Token.TokenTypes.DOT, 7, 21));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 27, "square"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 7, 28));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 29, "t"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 7, 30));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 8, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 8, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 8, 0));
		var tran = new TranNode();
		var p = new Parser(tran,tokens);
		p.Tran();
		Assertions.assertEquals(1,tran.Classes.size());
		Assertions.assertEquals("Example6",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(0,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(2,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("square",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals("s",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(0).type);
		Assertions.assertEquals("x",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals("s",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).target).name);
		Assertions.assertEquals("multiply",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("x",((VariableReferenceNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).name);
		Assertions.assertEquals("x",((VariableReferenceNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).right).name);
		Assertions.assertEquals("start",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals(2,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("t",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).target).name);
		Assertions.assertEquals(3.07,((NumericLiteralNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).value,.0001);
		Assertions.assertEquals("square",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).methodName);
		Assertions.assertEquals("t",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).returnValues.get(0)).name);
		Assertions.assertEquals("t",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).parameters.get(0)).name);
		Assertions.assertEquals("Example6",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).objectName.orElseThrow());
		Assertions.assertEquals(0,tran.Classes.get(0).members.size());
		Assertions.assertEquals(0,tran.Interfaces.size());
		Assertions.assertEquals("Example6",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(0,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(2,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("square",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals("s",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(0).type);
		Assertions.assertEquals("x",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals("s",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).target).name);
		Assertions.assertEquals("multiply",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("x",((VariableReferenceNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).name);
		Assertions.assertEquals("x",((VariableReferenceNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).right).name);
		Assertions.assertEquals("start",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals(2,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("t",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).target).name);
		Assertions.assertEquals(3.07,((NumericLiteralNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).value,.0001);
		Assertions.assertEquals("square",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).methodName);
		Assertions.assertEquals("t",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).returnValues.get(0)).name);
		Assertions.assertEquals("t",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).parameters.get(0)).name);
		Assertions.assertEquals("Example6",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).objectName.orElseThrow());
		Assertions.assertEquals(0,tran.Classes.get(0).members.size());
	}
}
