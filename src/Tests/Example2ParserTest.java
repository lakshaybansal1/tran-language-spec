package Tests;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.LinkedList;
import AST.*;
import Tran.*;
public class Example2ParserTest {

	@Test
	public void Example2ParserTestTest() throws Exception {
		var tokens = new LinkedList<Token>();
		tokens.add(new Token(Token.TokenTypes.CLASS, 1, 5));
		tokens.add(new Token(Token.TokenTypes.WORD, 1, 14, "Example2"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 2, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 2, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 10, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 12, "x"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 3, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 3, 10, "string"));
		tokens.add(new Token(Token.TokenTypes.WORD, 3, 12, "y"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 4, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 4, 0));
		tokens.add(new Token(Token.TokenTypes.CONSTRUCT, 4, 9));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 4, 10));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 4, 11));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 5, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 5, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 5, "x"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 5, 7));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 5, 9, "0"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 6, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 6, 5, "y"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 6, 7));
		tokens.add(new Token(Token.TokenTypes.QUOTEDSTRING, 6, 10));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 7, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 7, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 10, "doSomeWork"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 7, 11));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 7, 12));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 8, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 8, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 5, "x"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 8, 6));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 8, 8, "10"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 9, 0));
		tokens.add(new Token(Token.TokenTypes.LOOP, 9, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 9, 10, "x"));
		tokens.add(new Token(Token.TokenTypes.DOT, 9, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 9, 16, "times"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 9, 17));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 9, 18));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 10, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 10, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 15, "console"));
		tokens.add(new Token(Token.TokenTypes.DOT, 10, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 21, "print"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 10, 22));
		tokens.add(new Token(Token.TokenTypes.QUOTEDSTRING, 10, 36, "In The Block"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 10, 37));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 11, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 11, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 11, 11, "console"));
		tokens.add(new Token(Token.TokenTypes.DOT, 11, 12));
		tokens.add(new Token(Token.TokenTypes.WORD, 11, 17, "print"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 11, 18));
		tokens.add(new Token(Token.TokenTypes.QUOTEDSTRING, 11, 36, "Out of the block"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 11, 37));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 12, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 12, 0));
		var tran = new TranNode();
		var p = new Parser(tran,tokens);
		p.Tran();
		Assertions.assertEquals(1,tran.Classes.size());
		Assertions.assertEquals("Example2",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(0,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(0,tran.Classes.get(0).methods.size());
		Assertions.assertEquals(2,tran.Classes.get(0).members.size());
		Assertions.assertEquals("x",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.name);
		Assertions.assertEquals("number",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.type);
		Assertions.assertEquals("y",((MemberNode)tran.Classes.get(0).members.get(1)).declaration.name);
		Assertions.assertEquals("string",((MemberNode)tran.Classes.get(0).members.get(1)).declaration.type);
		Assertions.assertEquals(0,tran.Interfaces.size());
		Assertions.assertEquals("Example2",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(0,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(0,tran.Classes.get(0).methods.size());
		Assertions.assertEquals(2,tran.Classes.get(0).members.size());
		Assertions.assertEquals("x",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.name);
		Assertions.assertEquals("number",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.type);
		Assertions.assertEquals("y",((MemberNode)tran.Classes.get(0).members.get(1)).declaration.name);
		Assertions.assertEquals("string",((MemberNode)tran.Classes.get(0).members.get(1)).declaration.type);
	}
}
