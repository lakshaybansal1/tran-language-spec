package Tests;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.LinkedList;
import AST.*;
import Tran.*;
public class Example5ParserTest {

	@Test
	public void Example5ParserTestTest() throws Exception {
		var tokens = new LinkedList<Token>();
		tokens.add(new Token(Token.TokenTypes.CLASS, 1, 5));
		tokens.add(new Token(Token.TokenTypes.WORD, 1, 14, "Example5"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 2, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 2, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 16, "printNumbers"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 2, 17));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 2, 18));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 3, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 3, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 3, 14, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 3, 19, "temp"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 4, 0));
		tokens.add(new Token(Token.TokenTypes.LOOP, 4, 12));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 17, "temp"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 4, 19));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 21, "x"));
		tokens.add(new Token(Token.TokenTypes.DOT, 4, 22));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 27, "times"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 4, 28));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 4, 29));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 5, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 5, 12));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 19, "console"));
		tokens.add(new Token(Token.TokenTypes.DOT, 5, 20));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 25, "print"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 5, 27));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 31, "temp"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 5, 32));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 6, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 6, 4));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 6, 4));
		tokens.add(new Token(Token.TokenTypes.SHARED, 6, 10));
		tokens.add(new Token(Token.TokenTypes.WORD, 6, 15, "main"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 6, 16));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 6, 17));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 7, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 7, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 20, "printNumbers"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 7, 21));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 7, 22));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 8, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 8, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 8, 0));
		var tran = new TranNode();
		var p = new Parser(tran,tokens);
		p.Tran();
		Assertions.assertEquals(1,tran.Classes.size());
		Assertions.assertEquals("Example5",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(0,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(2,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("printNumbers",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals(1,((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).statements.size());
		Assertions.assertEquals("print",((MethodCallStatementNode)((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).statements.get(0)).methodName);
		Assertions.assertEquals("temp",((VariableReferenceNode)((MethodCallStatementNode)((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).statements.get(0)).parameters.get(0)).name);
		Assertions.assertEquals("console",((MethodCallStatementNode)((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).statements.get(0)).objectName.orElseThrow());
		Assertions.assertEquals("times",((MethodCallExpressionNode)((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).methodName);
		Assertions.assertEquals("x",((MethodCallExpressionNode)((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).objectName.get());
		Assertions.assertEquals("main",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("printNumbers",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).methodName);
		Assertions.assertEquals(0,tran.Classes.get(0).members.size());
		Assertions.assertEquals(0,tran.Interfaces.size());
		Assertions.assertEquals("Example5",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(0,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(2,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("printNumbers",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals(1,((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).statements.size());
		Assertions.assertEquals("print",((MethodCallStatementNode)((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).statements.get(0)).methodName);
		Assertions.assertEquals("temp",((VariableReferenceNode)((MethodCallStatementNode)((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).statements.get(0)).parameters.get(0)).name);
		Assertions.assertEquals("console",((MethodCallStatementNode)((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).statements.get(0)).objectName.orElseThrow());
		Assertions.assertEquals("times",((MethodCallExpressionNode)((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).methodName);
		Assertions.assertEquals("x",((MethodCallExpressionNode)((LoopNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).objectName.get());
		Assertions.assertEquals("main",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("printNumbers",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).methodName);
		Assertions.assertEquals(0,tran.Classes.get(0).members.size());
	}
}
