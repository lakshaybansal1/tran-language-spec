package Tests;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.LinkedList;
import AST.*;
import Tran.*;
public class InterfaceExampleParserTest {

	@Test
	public void InterfaceExampleParserTestTest() throws Exception {
		var tokens = new LinkedList<Token>();
		tokens.add(new Token(Token.TokenTypes.INTERFACE, 1, 9));
		tokens.add(new Token(Token.TokenTypes.WORD, 1, 18, "someName"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 2, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 2, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 10, "square"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 2, 11));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 2, 12));
		tokens.add(new Token(Token.TokenTypes.COLON, 2, 14));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 21, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 23, "s"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 3, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 4, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 4, 0));
		tokens.add(new Token(Token.TokenTypes.CLASS, 4, 5));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 17, "TranExample"));
		tokens.add(new Token(Token.TokenTypes.IMPLEMENTS, 4, 28));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 37, "someName"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 5, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 5, 4));
		tokens.add(new Token(Token.TokenTypes.SHARED, 5, 10));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 16, "start"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 5, 17));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 5, 18));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 6, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 6, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 6, 14, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 6, 16, "x"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 6, 18));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 6, 21, "10"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 7, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 14, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 16, "y"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 7, 18));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 30, "TranExample"));
		tokens.add(new Token(Token.TokenTypes.DOT, 7, 31));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 37, "square"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 7, 38));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 39, "x"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 7, 40));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 8, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 15, "console"));
		tokens.add(new Token(Token.TokenTypes.DOT, 8, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 21, "print"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 8, 22));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 23, "y"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 8, 24));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 9, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 10, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 10, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 10, "square"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 10, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 17, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 19, "x"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 10, 20));
		tokens.add(new Token(Token.TokenTypes.COLON, 10, 22));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 29, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 31, "s"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 11, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 11, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 11, 9, "s"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 11, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 11, 13, "x"));
		tokens.add(new Token(Token.TokenTypes.TIMES, 11, 14));
		tokens.add(new Token(Token.TokenTypes.WORD, 11, 15, "x"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 12, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 13, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 13, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 13, 0));
		tokens.add(new Token(Token.TokenTypes.CLASS, 13, 5));
		tokens.add(new Token(Token.TokenTypes.WORD, 13, 20, "UseTranExample"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 14, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 14, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 14, 14, "someMethod"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 14, 15));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 14, 16));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 15, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 15, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 15, 16, "someName"));
		tokens.add(new Token(Token.TokenTypes.WORD, 15, 18, "t"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 15, 20));
		tokens.add(new Token(Token.TokenTypes.NEW, 15, 24));
		tokens.add(new Token(Token.TokenTypes.WORD, 15, 36, "TranExample"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 15, 37));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 15, 38));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 16, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 16, 9, "t"));
		tokens.add(new Token(Token.TokenTypes.DOT, 16, 10));
		tokens.add(new Token(Token.TokenTypes.WORD, 16, 16, "square"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 16, 17));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 16, 19, "20"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 16, 20));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 17, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 17, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 17, 0));
		var tran = new TranNode();
		var p = new Parser(tran,tokens);
		p.Tran();
		Assertions.assertEquals(2,tran.Classes.size());
		Assertions.assertEquals("TranExample",tran.Classes.get(0).name);
		Assertions.assertEquals(1,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals("someName",tran.Classes.get(0).interfaces.get(0));
		Assertions.assertEquals(0,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(2,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("start",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals("print",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).methodName);
		Assertions.assertEquals("y",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).parameters.get(0)).name);
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).objectName.orElseThrow());
		Assertions.assertEquals("square",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals("s",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).returns.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).returns.get(0).type);
		Assertions.assertEquals("x",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).parameters.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).parameters.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("s",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).target).name);
		Assertions.assertEquals("multiply",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("x",((VariableReferenceNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).name);
		Assertions.assertEquals("x",((VariableReferenceNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).right).name);
		Assertions.assertEquals(0,tran.Classes.get(0).members.size());
		Assertions.assertEquals("UseTranExample",tran.Classes.get(1).name);
		Assertions.assertEquals(0,tran.Classes.get(1).interfaces.size());
		Assertions.assertEquals(0,tran.Classes.get(1).constructors.size());
		Assertions.assertEquals(1,tran.Classes.get(1).methods.size());
		Assertions.assertEquals("someMethod",((MethodDeclarationNode)tran.Classes.get(1).methods.get(0)).name);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(1).methods.get(0)).statements.size());
		Assertions.assertEquals("square",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(1).methods.get(0)).statements.get(0)).methodName);
		Assertions.assertEquals(20,((NumericLiteralNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(1).methods.get(0)).statements.get(0)).parameters.get(0)).value);
		Assertions.assertEquals("t",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(1).methods.get(0)).statements.get(0)).objectName.orElseThrow());
		Assertions.assertEquals(0,tran.Classes.get(1).members.size());
		Assertions.assertEquals(1,tran.Interfaces.size());
		Assertions.assertEquals("someName",tran.Interfaces.get(0).name);
		Assertions.assertEquals(1,tran.Interfaces.get(0).methods.size());
		Assertions.assertEquals("square",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(0)).name);
		Assertions.assertEquals("s",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(0)).returns.get(0).name);
		Assertions.assertEquals("number",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(0)).returns.get(0).type);
	}
}
