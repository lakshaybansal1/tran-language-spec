package Tests;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.LinkedList;
import AST.*;
import Tran.*;
public class FahrenheitParserTest {

	@Test
	public void FahrenheitParserTestTest() throws Exception {
		var tokens = new LinkedList<Token>();
		tokens.add(new Token(Token.TokenTypes.CLASS, 1, 5));
		tokens.add(new Token(Token.TokenTypes.WORD, 1, 16, "fahrenheit"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 2, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 2, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 10, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 22, "temperature"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 3, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 4, 0));
		tokens.add(new Token(Token.TokenTypes.CONSTRUCT, 4, 13));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 4, 14));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 20, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 22, "t"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 4, 23));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 5, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 5, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 19, "temperature"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 5, 21));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 23, "t"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 6, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 7, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 7, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 15, "fromCelsius"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 7, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 23, "celsius"));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 25, "c"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 7, 26));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 8, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 8, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 19, "temperature"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 8, 21));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 8, 23));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 24, "c"));
		tokens.add(new Token(Token.TokenTypes.DOT, 8, 25));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 28, "get"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 8, 29));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 8, 30));
		tokens.add(new Token(Token.TokenTypes.TIMES, 8, 32));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 8, 34, "9"));
		tokens.add(new Token(Token.TokenTypes.DIVIDE, 8, 36));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 8, 38, "5"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 8, 40));
		tokens.add(new Token(Token.TokenTypes.PLUS, 8, 42));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 8, 45, "32"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 9, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 10, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 10, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 7, "get"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 10, 8));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 10, 9));
		tokens.add(new Token(Token.TokenTypes.COLON, 10, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 18, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 20, "c"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 11, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 11, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 11, 9, "c"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 11, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 11, 23, "temperature"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 12, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 13, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 13, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 13, 13, "toCelsius"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 13, 14));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 13, 15));
		tokens.add(new Token(Token.TokenTypes.COLON, 13, 17));
		tokens.add(new Token(Token.TokenTypes.WORD, 13, 25, "celsius"));
		tokens.add(new Token(Token.TokenTypes.WORD, 13, 27, "c"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 14, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 14, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 14, 14, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 14, 22, "convert"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 15, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 15, 15, "convert"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 15, 17));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 15, 19));
		tokens.add(new Token(Token.TokenTypes.WORD, 15, 30, "temperature"));
		tokens.add(new Token(Token.TokenTypes.MINUS, 15, 32));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 15, 34, "32"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 15, 35));
		tokens.add(new Token(Token.TokenTypes.TIMES, 15, 36));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 15, 37, "5"));
		tokens.add(new Token(Token.TokenTypes.DIVIDE, 15, 38));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 15, 39, "9"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 16, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 16, 9, "c"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 16, 11));
		tokens.add(new Token(Token.TokenTypes.NEW, 16, 15));
		tokens.add(new Token(Token.TokenTypes.WORD, 16, 23, "celsius"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 16, 24));
		tokens.add(new Token(Token.TokenTypes.WORD, 16, 31, "convert"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 16, 32));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 17, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 17, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 17, 0));
		var tran = new TranNode();
		var p = new Parser(tran,tokens);
		p.Tran();
		Assertions.assertEquals(1,tran.Classes.size());
		Assertions.assertEquals("fahrenheit",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.get(0).parameters.size());
		Assertions.assertEquals("t",tran.Classes.get(0).constructors.get(0).parameters.get(0).name);
		Assertions.assertEquals("number",tran.Classes.get(0).constructors.get(0).parameters.get(0).type);
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.get(0).statements.size());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)tran.Classes.get(0).constructors.get(0).statements.get(0)).target).name);
		Assertions.assertEquals("t",((VariableReferenceNode)((AssignmentNode)tran.Classes.get(0).constructors.get(0).statements.get(0)).expression).name);
		Assertions.assertEquals(3,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("fromCelsius",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals("c",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).name);
		Assertions.assertEquals("celsius",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).target).name);
		Assertions.assertEquals("add",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("divide",((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).op.toString());
		Assertions.assertEquals("multiply",((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).op.toString());
		Assertions.assertEquals("get",((MethodCallExpressionNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).left).methodName);
		Assertions.assertEquals("c",((MethodCallExpressionNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).left).objectName.get());
		Assertions.assertEquals(9,((NumericLiteralNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).right).value);
		Assertions.assertEquals(5,((NumericLiteralNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).right).value);
		Assertions.assertEquals(32,((NumericLiteralNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).right).value);
		Assertions.assertEquals("get",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals("c",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).returns.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).returns.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("c",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).target).name);
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).name);
		Assertions.assertEquals("toCelsius",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).name);
		Assertions.assertEquals("c",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).returns.get(0).name);
		Assertions.assertEquals("celsius",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).returns.get(0).type);
		Assertions.assertEquals(2,((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.size());
		Assertions.assertEquals("convert",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).target).name);
		Assertions.assertEquals("divide",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("multiply",((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).left).op.toString());
		Assertions.assertEquals("subtract",((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).left).left).op.toString());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).left).left).left).name);
		Assertions.assertEquals(32,((NumericLiteralNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).left).left).right).value);
		Assertions.assertEquals(5,((NumericLiteralNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).left).right).value);
		Assertions.assertEquals(9,((NumericLiteralNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).right).value);
		Assertions.assertEquals("c",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(1)).target).name);
		Assertions.assertEquals(1,((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(1)).expression).parameters.size());
		Assertions.assertEquals("convert",((VariableReferenceNode)((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(1)).expression).parameters.get(0)).name);
		Assertions.assertEquals(1,tran.Classes.get(0).members.size());
		Assertions.assertEquals("temperature",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.name);
		Assertions.assertEquals("number",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.type);
		Assertions.assertEquals(0,tran.Interfaces.size());
		Assertions.assertEquals("fahrenheit",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.get(0).parameters.size());
		Assertions.assertEquals("t",tran.Classes.get(0).constructors.get(0).parameters.get(0).name);
		Assertions.assertEquals("number",tran.Classes.get(0).constructors.get(0).parameters.get(0).type);
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.get(0).statements.size());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)tran.Classes.get(0).constructors.get(0).statements.get(0)).target).name);
		Assertions.assertEquals("t",((VariableReferenceNode)((AssignmentNode)tran.Classes.get(0).constructors.get(0).statements.get(0)).expression).name);
		Assertions.assertEquals(3,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("fromCelsius",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals("c",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).name);
		Assertions.assertEquals("celsius",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).target).name);
		Assertions.assertEquals("add",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("divide",((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).op.toString());
		Assertions.assertEquals("multiply",((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).op.toString());
		Assertions.assertEquals("get",((MethodCallExpressionNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).left).methodName);
		Assertions.assertEquals("c",((MethodCallExpressionNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).left).objectName.get());
		Assertions.assertEquals(9,((NumericLiteralNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).right).value);
		Assertions.assertEquals(5,((NumericLiteralNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).right).value);
		Assertions.assertEquals(32,((NumericLiteralNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).right).value);
		Assertions.assertEquals("get",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals("c",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).returns.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).returns.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("c",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).target).name);
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).name);
		Assertions.assertEquals("toCelsius",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).name);
		Assertions.assertEquals("c",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).returns.get(0).name);
		Assertions.assertEquals("celsius",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).returns.get(0).type);
		Assertions.assertEquals(2,((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.size());
		Assertions.assertEquals("convert",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).target).name);
		Assertions.assertEquals("divide",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("multiply",((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).left).op.toString());
		Assertions.assertEquals("subtract",((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).left).left).op.toString());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).left).left).left).name);
		Assertions.assertEquals(32,((NumericLiteralNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).left).left).right).value);
		Assertions.assertEquals(5,((NumericLiteralNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).left).right).value);
		Assertions.assertEquals(9,((NumericLiteralNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).right).value);
		Assertions.assertEquals("c",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(1)).target).name);
		Assertions.assertEquals(1,((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(1)).expression).parameters.size());
		Assertions.assertEquals("convert",((VariableReferenceNode)((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(1)).expression).parameters.get(0)).name);
		Assertions.assertEquals(1,tran.Classes.get(0).members.size());
		Assertions.assertEquals("temperature",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.name);
		Assertions.assertEquals("number",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.type);
	}
}
