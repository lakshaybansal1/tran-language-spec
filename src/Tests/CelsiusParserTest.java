package Tests;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.LinkedList;
import AST.*;
import Tran.*;
public class CelsiusParserTest {

	@Test
	public void CelsiusParserTestTest() throws Exception {
		var tokens = new LinkedList<Token>();
		tokens.add(new Token(Token.TokenTypes.CLASS, 1, 5));
		tokens.add(new Token(Token.TokenTypes.WORD, 1, 13, "celsius"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 2, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 2, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 10, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 22, "temperature"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 3, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 4, 0));
		tokens.add(new Token(Token.TokenTypes.CONSTRUCT, 4, 13));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 4, 14));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 20, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 22, "t"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 4, 23));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 5, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 5, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 19, "temperature"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 5, 21));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 23, "t"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 6, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 7, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 7, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 18, "fromFahrenheit"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 7, 19));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 29, "fahrenheit"));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 31, "f"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 7, 32));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 8, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 8, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 19, "temperature"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 8, 21));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 8, 23));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 24, "f"));
		tokens.add(new Token(Token.TokenTypes.DOT, 8, 25));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 28, "get"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 8, 29));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 8, 30));
		tokens.add(new Token(Token.TokenTypes.MINUS, 8, 32));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 8, 34, "32"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 8, 35));
		tokens.add(new Token(Token.TokenTypes.TIMES, 8, 36));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 8, 37, "5"));
		tokens.add(new Token(Token.TokenTypes.DIVIDE, 8, 38));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 8, 39, "9"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 9, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 10, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 10, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 16, "toFahrenheit"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 10, 17));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 10, 18));
		tokens.add(new Token(Token.TokenTypes.COLON, 10, 20));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 31, "fahrenheit"));
		tokens.add(new Token(Token.TokenTypes.WORD, 10, 33, "f"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 11, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 11, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 11, 14, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 11, 22, "convert"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 12, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 12, 15, "convert"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 12, 17));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 12, 19));
		tokens.add(new Token(Token.TokenTypes.WORD, 12, 30, "temperature"));
		tokens.add(new Token(Token.TokenTypes.TIMES, 12, 32));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 12, 34, "9"));
		tokens.add(new Token(Token.TokenTypes.DIVIDE, 12, 36));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 12, 38, "5"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 12, 40));
		tokens.add(new Token(Token.TokenTypes.PLUS, 12, 42));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 12, 45, "32"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 13, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 13, 9, "f"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 13, 11));
		tokens.add(new Token(Token.TokenTypes.NEW, 13, 15));
		tokens.add(new Token(Token.TokenTypes.WORD, 13, 26, "fahrenheit"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 13, 27));
		tokens.add(new Token(Token.TokenTypes.WORD, 13, 34, "convert"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 13, 35));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 14, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 15, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 15, 4));
		tokens.add(new Token(Token.TokenTypes.WORD, 15, 7, "get"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 15, 8));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 15, 9));
		tokens.add(new Token(Token.TokenTypes.COLON, 15, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 15, 18, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 15, 20, "c"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 16, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 16, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 16, 9, "c"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 16, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 16, 23, "temperature"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 17, 0));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 18, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 18, 4));
		tokens.add(new Token(Token.TokenTypes.SHARED, 18, 10));
		tokens.add(new Token(Token.TokenTypes.WORD, 18, 16, "start"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 18, 17));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 18, 18));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 19, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 19, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 19, 18, "fahrenheit"));
		tokens.add(new Token(Token.TokenTypes.WORD, 19, 20, "f"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 20, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 20, 15, "celsius"));
		tokens.add(new Token(Token.TokenTypes.WORD, 20, 20, "back"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 21, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 21, 15, "celsius"));
		tokens.add(new Token(Token.TokenTypes.WORD, 21, 19, "ten"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 22, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 22, 11, "ten"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 22, 13));
		tokens.add(new Token(Token.TokenTypes.NEW, 22, 17));
		tokens.add(new Token(Token.TokenTypes.WORD, 22, 25, "celsius"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 22, 26));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 22, 28, "10"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 22, 29));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 23, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 23, 15, "console"));
		tokens.add(new Token(Token.TokenTypes.DOT, 23, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 23, 21, "write"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 23, 22));
		tokens.add(new Token(Token.TokenTypes.QUOTEDSTRING, 23, 31, "Celsius"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 23, 32));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 24, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 24, 15, "console"));
		tokens.add(new Token(Token.TokenTypes.DOT, 24, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 24, 21, "write"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 24, 22));
		tokens.add(new Token(Token.TokenTypes.WORD, 24, 25, "ten"));
		tokens.add(new Token(Token.TokenTypes.DOT, 24, 26));
		tokens.add(new Token(Token.TokenTypes.WORD, 24, 29, "get"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 24, 30));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 24, 31));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 24, 32));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 25, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 25, 15, "console"));
		tokens.add(new Token(Token.TokenTypes.DOT, 25, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 25, 21, "write"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 25, 22));
		tokens.add(new Token(Token.TokenTypes.QUOTEDSTRING, 25, 34, "Fahrenheit"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 25, 35));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 26, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 26, 9, "f"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 26, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 26, 15, "ten"));
		tokens.add(new Token(Token.TokenTypes.DOT, 26, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 26, 28, "toFahrenheit"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 26, 29));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 26, 30));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 27, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 27, 15, "console"));
		tokens.add(new Token(Token.TokenTypes.DOT, 27, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 27, 21, "write"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 27, 22));
		tokens.add(new Token(Token.TokenTypes.WORD, 27, 23, "f"));
		tokens.add(new Token(Token.TokenTypes.DOT, 27, 24));
		tokens.add(new Token(Token.TokenTypes.WORD, 27, 27, "get"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 27, 28));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 27, 29));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 27, 30));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 28, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 28, 12, "back"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 28, 14));
		tokens.add(new Token(Token.TokenTypes.WORD, 28, 16, "f"));
		tokens.add(new Token(Token.TokenTypes.DOT, 28, 17));
		tokens.add(new Token(Token.TokenTypes.WORD, 28, 26, "toCelsius"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 28, 27));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 28, 28));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 29, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 29, 15, "console"));
		tokens.add(new Token(Token.TokenTypes.DOT, 29, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 29, 21, "write"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 29, 22));
		tokens.add(new Token(Token.TokenTypes.QUOTEDSTRING, 29, 31, "Celsius"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 29, 32));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 30, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 30, 15, "console"));
		tokens.add(new Token(Token.TokenTypes.DOT, 30, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 30, 21, "write"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 30, 22));
		tokens.add(new Token(Token.TokenTypes.WORD, 30, 26, "back"));
		tokens.add(new Token(Token.TokenTypes.DOT, 30, 27));
		tokens.add(new Token(Token.TokenTypes.WORD, 30, 30, "get"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 30, 31));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 30, 32));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 30, 33));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 31, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 31, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 31, 0));
		var tran = new TranNode();
		var p = new Parser(tran,tokens);
		p.Tran();
		Assertions.assertEquals(1,tran.Classes.size());
		Assertions.assertEquals("celsius",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.get(0).parameters.size());
		Assertions.assertEquals("t",tran.Classes.get(0).constructors.get(0).parameters.get(0).name);
		Assertions.assertEquals("number",tran.Classes.get(0).constructors.get(0).parameters.get(0).type);
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.get(0).statements.size());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)tran.Classes.get(0).constructors.get(0).statements.get(0)).target).name);
		Assertions.assertEquals("t",((VariableReferenceNode)((AssignmentNode)tran.Classes.get(0).constructors.get(0).statements.get(0)).expression).name);
		Assertions.assertEquals(4,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("fromFahrenheit",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals("f",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).name);
		Assertions.assertEquals("fahrenheit",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).target).name);
		Assertions.assertEquals("divide",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("multiply",((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).op.toString());
		Assertions.assertEquals("subtract",((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).op.toString());
		Assertions.assertEquals("get",((MethodCallExpressionNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).left).methodName);
		Assertions.assertEquals("f",((MethodCallExpressionNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).left).objectName.get());
		Assertions.assertEquals(32,((NumericLiteralNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).right).value);
		Assertions.assertEquals(5,((NumericLiteralNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).right).value);
		Assertions.assertEquals(9,((NumericLiteralNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).right).value);
		Assertions.assertEquals("toFahrenheit",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals("f",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).returns.get(0).name);
		Assertions.assertEquals("fahrenheit",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).returns.get(0).type);
		Assertions.assertEquals(2,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("convert",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).target).name);
		Assertions.assertEquals("add",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("divide",((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).op.toString());
		Assertions.assertEquals("multiply",((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).left).op.toString());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).left).left).name);
		Assertions.assertEquals(9,((NumericLiteralNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).left).right).value);
		Assertions.assertEquals(5,((NumericLiteralNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).right).value);
		Assertions.assertEquals(32,((NumericLiteralNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).right).value);
		Assertions.assertEquals("f",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).target).name);
		Assertions.assertEquals(1,((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).expression).parameters.size());
		Assertions.assertEquals("convert",((VariableReferenceNode)((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).expression).parameters.get(0)).name);
		Assertions.assertEquals("get",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).name);
		Assertions.assertEquals("c",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).returns.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).returns.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.size());
		Assertions.assertEquals("c",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).target).name);
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).name);
		Assertions.assertEquals("start",((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).name);
		Assertions.assertEquals(9,((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.size());
		Assertions.assertEquals("ten",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(0)).target).name);
		Assertions.assertEquals(1,((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(0)).expression).parameters.size());
		Assertions.assertEquals(10,((NumericLiteralNode)((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(0)).expression).parameters.get(0)).value);
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(1)).methodName);
		Assertions.assertEquals("Celsius",((StringLiteralNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(1)).parameters.get(0)).value);
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(1)).objectName.orElseThrow());
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(2)).methodName);
		Assertions.assertEquals("get",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(2)).parameters.get(0)).methodName);
		Assertions.assertEquals("ten",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(2)).parameters.get(0)).objectName.get());
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(2)).objectName.orElseThrow());
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(3)).methodName);
		Assertions.assertEquals("Fahrenheit",((StringLiteralNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(3)).parameters.get(0)).value);
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(3)).objectName.orElseThrow());
		Assertions.assertEquals("toFahrenheit",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(4)).methodName);
		Assertions.assertEquals("f",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(4)).returnValues.get(0)).name);
		Assertions.assertEquals("ten",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(4)).objectName.orElseThrow());
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(5)).methodName);
		Assertions.assertEquals("get",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(5)).parameters.get(0)).methodName);
		Assertions.assertEquals("f",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(5)).parameters.get(0)).objectName.get());
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(5)).objectName.orElseThrow());
		Assertions.assertEquals("toCelsius",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(6)).methodName);
		Assertions.assertEquals("back",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(6)).returnValues.get(0)).name);
		Assertions.assertEquals("f",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(6)).objectName.orElseThrow());
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(7)).methodName);
		Assertions.assertEquals("Celsius",((StringLiteralNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(7)).parameters.get(0)).value);
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(7)).objectName.orElseThrow());
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(8)).methodName);
		Assertions.assertEquals("get",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(8)).parameters.get(0)).methodName);
		Assertions.assertEquals("back",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(8)).parameters.get(0)).objectName.get());
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(8)).objectName.orElseThrow());
		Assertions.assertEquals(1,tran.Classes.get(0).members.size());
		Assertions.assertEquals("temperature",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.name);
		Assertions.assertEquals("number",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.type);
		Assertions.assertEquals(0,tran.Interfaces.size());
		Assertions.assertEquals("celsius",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.get(0).parameters.size());
		Assertions.assertEquals("t",tran.Classes.get(0).constructors.get(0).parameters.get(0).name);
		Assertions.assertEquals("number",tran.Classes.get(0).constructors.get(0).parameters.get(0).type);
		Assertions.assertEquals(1,tran.Classes.get(0).constructors.get(0).statements.size());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)tran.Classes.get(0).constructors.get(0).statements.get(0)).target).name);
		Assertions.assertEquals("t",((VariableReferenceNode)((AssignmentNode)tran.Classes.get(0).constructors.get(0).statements.get(0)).expression).name);
		Assertions.assertEquals(4,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("fromFahrenheit",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals("f",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).name);
		Assertions.assertEquals("fahrenheit",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).target).name);
		Assertions.assertEquals("divide",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("multiply",((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).op.toString());
		Assertions.assertEquals("subtract",((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).op.toString());
		Assertions.assertEquals("get",((MethodCallExpressionNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).left).methodName);
		Assertions.assertEquals("f",((MethodCallExpressionNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).left).objectName.get());
		Assertions.assertEquals(32,((NumericLiteralNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).left).right).value);
		Assertions.assertEquals(5,((NumericLiteralNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).left).right).value);
		Assertions.assertEquals(9,((NumericLiteralNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).right).value);
		Assertions.assertEquals("toFahrenheit",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals("f",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).returns.get(0).name);
		Assertions.assertEquals("fahrenheit",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).returns.get(0).type);
		Assertions.assertEquals(2,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("convert",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).target).name);
		Assertions.assertEquals("add",((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).op.toString());
		Assertions.assertEquals("divide",((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).op.toString());
		Assertions.assertEquals("multiply",((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).left).op.toString());
		Assertions.assertEquals("temperature",((VariableReferenceNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).left).left).name);
		Assertions.assertEquals(9,((NumericLiteralNode)((MathOpNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).left).right).value);
		Assertions.assertEquals(5,((NumericLiteralNode)((MathOpNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).left).right).value);
		Assertions.assertEquals(32,((NumericLiteralNode)((MathOpNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).expression).right).value);
		Assertions.assertEquals("f",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).target).name);
		Assertions.assertEquals(1,((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).expression).parameters.size());
		Assertions.assertEquals("convert",((VariableReferenceNode)((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(1)).expression).parameters.get(0)).name);
		Assertions.assertEquals("get",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).name);
		Assertions.assertEquals("c",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).returns.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).returns.get(0).type);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.size());
		Assertions.assertEquals("c",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).target).name);
		Assertions.assertEquals("temperature",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(2)).statements.get(0)).expression).name);
		Assertions.assertEquals("start",((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).name);
		Assertions.assertEquals(9,((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.size());
		Assertions.assertEquals("ten",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(0)).target).name);
		Assertions.assertEquals(1,((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(0)).expression).parameters.size());
		Assertions.assertEquals(10,((NumericLiteralNode)((NewNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(0)).expression).parameters.get(0)).value);
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(1)).methodName);
		Assertions.assertEquals("Celsius",((StringLiteralNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(1)).parameters.get(0)).value);
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(1)).objectName.orElseThrow());
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(2)).methodName);
		Assertions.assertEquals("get",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(2)).parameters.get(0)).methodName);
		Assertions.assertEquals("ten",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(2)).parameters.get(0)).objectName.get());
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(2)).objectName.orElseThrow());
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(3)).methodName);
		Assertions.assertEquals("Fahrenheit",((StringLiteralNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(3)).parameters.get(0)).value);
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(3)).objectName.orElseThrow());
		Assertions.assertEquals("toFahrenheit",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(4)).methodName);
		Assertions.assertEquals("f",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(4)).returnValues.get(0)).name);
		Assertions.assertEquals("ten",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(4)).objectName.orElseThrow());
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(5)).methodName);
		Assertions.assertEquals("get",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(5)).parameters.get(0)).methodName);
		Assertions.assertEquals("f",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(5)).parameters.get(0)).objectName.get());
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(5)).objectName.orElseThrow());
		Assertions.assertEquals("toCelsius",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(6)).methodName);
		Assertions.assertEquals("back",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(6)).returnValues.get(0)).name);
		Assertions.assertEquals("f",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(6)).objectName.orElseThrow());
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(7)).methodName);
		Assertions.assertEquals("Celsius",((StringLiteralNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(7)).parameters.get(0)).value);
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(7)).objectName.orElseThrow());
		Assertions.assertEquals("write",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(8)).methodName);
		Assertions.assertEquals("get",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(8)).parameters.get(0)).methodName);
		Assertions.assertEquals("back",((MethodCallExpressionNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(8)).parameters.get(0)).objectName.get());
		Assertions.assertEquals("console",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(3)).statements.get(8)).objectName.orElseThrow());
		Assertions.assertEquals(1,tran.Classes.get(0).members.size());
		Assertions.assertEquals("temperature",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.name);
		Assertions.assertEquals("number",((MemberNode)tran.Classes.get(0).members.get(0)).declaration.type);
	}
}
