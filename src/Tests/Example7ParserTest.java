package Tests;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.LinkedList;
import AST.*;
import Tran.*;
public class Example7ParserTest {

	@Test
	public void Example7ParserTestTest() throws Exception {
		var tokens = new LinkedList<Token>();
		tokens.add(new Token(Token.TokenTypes.CLASS, 1, 5));
		tokens.add(new Token(Token.TokenTypes.WORD, 1, 14, "Example7"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 2, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 2, 4));
		tokens.add(new Token(Token.TokenTypes.SHARED, 2, 10));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 20, "allMyData"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 2, 21));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 27, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 29, "x"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 2, 30));
		tokens.add(new Token(Token.TokenTypes.COLON, 2, 32));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 39, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 41, "n"));
		tokens.add(new Token(Token.TokenTypes.COMMA, 2, 42));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 49, "string"));
		tokens.add(new Token(Token.TokenTypes.WORD, 2, 51, "t"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 3, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 3, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 3, 9, "t"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 3, 11));
		tokens.add(new Token(Token.TokenTypes.QUOTEDSTRING, 3, 19, "hello"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 4, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 9, "n"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 4, 11));
		tokens.add(new Token(Token.TokenTypes.WORD, 4, 13, "x"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 5, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 5, 4));
		tokens.add(new Token(Token.TokenTypes.SHARED, 5, 10));
		tokens.add(new Token(Token.TokenTypes.WORD, 5, 16, "start"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 5, 17));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 5, 18));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 6, 0));
		tokens.add(new Token(Token.TokenTypes.INDENT, 6, 8));
		tokens.add(new Token(Token.TokenTypes.WORD, 6, 14, "number"));
		tokens.add(new Token(Token.TokenTypes.WORD, 6, 18, "num"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 7, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 14, "string"));
		tokens.add(new Token(Token.TokenTypes.WORD, 7, 16, "s"));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 8, 0));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 11, "num"));
		tokens.add(new Token(Token.TokenTypes.COMMA, 8, 12));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 14, "s"));
		tokens.add(new Token(Token.TokenTypes.ASSIGN, 8, 16));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 25, "Example7"));
		tokens.add(new Token(Token.TokenTypes.DOT, 8, 26));
		tokens.add(new Token(Token.TokenTypes.WORD, 8, 35, "allMyData"));
		tokens.add(new Token(Token.TokenTypes.LPAREN, 8, 36));
		tokens.add(new Token(Token.TokenTypes.NUMBER, 8, 38, "45"));
		tokens.add(new Token(Token.TokenTypes.RPAREN, 8, 39));
		tokens.add(new Token(Token.TokenTypes.NEWLINE, 9, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 9, 0));
		tokens.add(new Token(Token.TokenTypes.DEDENT, 9, 0));
		var tran = new TranNode();
		var p = new Parser(tran,tokens);
		p.Tran();
		Assertions.assertEquals(1,tran.Classes.size());
		Assertions.assertEquals("Example7",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(0,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(2,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("allMyData",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals("n",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(0).type);
		Assertions.assertEquals("t",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(1).name);
		Assertions.assertEquals("string",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(1).type);
		Assertions.assertEquals("x",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).type);
		Assertions.assertEquals(2,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals("t",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).target).name);
		Assertions.assertEquals("hello",((StringLiteralNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).value);
		Assertions.assertEquals("n",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(1)).target).name);
		Assertions.assertEquals("x",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(1)).expression).name);
		Assertions.assertEquals("start",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("allMyData",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).methodName);
		Assertions.assertEquals("num",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).returnValues.get(0)).name);
		Assertions.assertEquals("s",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).returnValues.get(1)).name);
		Assertions.assertEquals(45,((NumericLiteralNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).parameters.get(0)).value);
		Assertions.assertEquals("Example7",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).objectName.orElseThrow());
		Assertions.assertEquals(0,tran.Classes.get(0).members.size());
		Assertions.assertEquals(0,tran.Interfaces.size());
		Assertions.assertEquals("Example7",tran.Classes.get(0).name);
		Assertions.assertEquals(0,tran.Classes.get(0).interfaces.size());
		Assertions.assertEquals(0,tran.Classes.get(0).constructors.size());
		Assertions.assertEquals(2,tran.Classes.get(0).methods.size());
		Assertions.assertEquals("allMyData",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).name);
		Assertions.assertEquals("n",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(0).type);
		Assertions.assertEquals("t",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(1).name);
		Assertions.assertEquals("string",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).returns.get(1).type);
		Assertions.assertEquals("x",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).name);
		Assertions.assertEquals("number",((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).parameters.get(0).type);
		Assertions.assertEquals(2,((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.size());
		Assertions.assertEquals("t",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).target).name);
		Assertions.assertEquals("hello",((StringLiteralNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(0)).expression).value);
		Assertions.assertEquals("n",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(1)).target).name);
		Assertions.assertEquals("x",((VariableReferenceNode)((AssignmentNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(0)).statements.get(1)).expression).name);
		Assertions.assertEquals("start",((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).name);
		Assertions.assertEquals(1,((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.size());
		Assertions.assertEquals("allMyData",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).methodName);
		Assertions.assertEquals("num",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).returnValues.get(0)).name);
		Assertions.assertEquals("s",((VariableReferenceNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).returnValues.get(1)).name);
		Assertions.assertEquals(45,((NumericLiteralNode)((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).parameters.get(0)).value);
		Assertions.assertEquals("Example7",((MethodCallStatementNode)((MethodDeclarationNode)tran.Classes.get(0).methods.get(1)).statements.get(0)).objectName.orElseThrow());
		Assertions.assertEquals(0,tran.Classes.get(0).members.size());
	}
}
