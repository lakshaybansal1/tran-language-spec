package Tests;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.LinkedList;
import AST.*;
import Tran.*;
public class Parser1ComplexExampleParserTest {

    @Test
    public void Parser1ComplexExampleParserTestTest() throws Exception {
        var tokens = new LinkedList<Token>();
        tokens.add(new Token(Token.TokenTypes.INTERFACE, 1, 9));
        tokens.add(new Token(Token.TokenTypes.WORD, 1, 24, "complexExample"));
        tokens.add(new Token(Token.TokenTypes.NEWLINE, 2, 0));
        tokens.add(new Token(Token.TokenTypes.INDENT, 2, 4));
        tokens.add(new Token(Token.TokenTypes.WORD, 2, 16, "simpleMethod"));
        tokens.add(new Token(Token.TokenTypes.LPAREN, 2, 17));
        tokens.add(new Token(Token.TokenTypes.RPAREN, 2, 18));
        tokens.add(new Token(Token.TokenTypes.NEWLINE, 3, 0));
        tokens.add(new Token(Token.TokenTypes.WORD, 3, 19, "methodWithParam"));
        tokens.add(new Token(Token.TokenTypes.LPAREN, 3, 20));
        tokens.add(new Token(Token.TokenTypes.WORD, 3, 26, "number"));
        tokens.add(new Token(Token.TokenTypes.WORD, 3, 30, "one"));
        tokens.add(new Token(Token.TokenTypes.RPAREN, 3, 31));
        tokens.add(new Token(Token.TokenTypes.NEWLINE, 4, 0));
        tokens.add(new Token(Token.TokenTypes.WORD, 4, 28, "methodWithOneReturnValue"));
        tokens.add(new Token(Token.TokenTypes.LPAREN, 4, 29));
        tokens.add(new Token(Token.TokenTypes.RPAREN, 4, 30));
        tokens.add(new Token(Token.TokenTypes.COLON, 4, 32));
        tokens.add(new Token(Token.TokenTypes.WORD, 4, 39, "number"));
        tokens.add(new Token(Token.TokenTypes.WORD, 4, 44, "good"));
        tokens.add(new Token(Token.TokenTypes.NEWLINE, 5, 0));
        tokens.add(new Token(Token.TokenTypes.WORD, 5, 24, "methodWithManyParams"));
        tokens.add(new Token(Token.TokenTypes.LPAREN, 5, 25));
        tokens.add(new Token(Token.TokenTypes.WORD, 5, 31, "number"));
        tokens.add(new Token(Token.TokenTypes.WORD, 5, 35, "one"));
        tokens.add(new Token(Token.TokenTypes.COMMA, 5, 36));
        tokens.add(new Token(Token.TokenTypes.WORD, 5, 43, "string"));
        tokens.add(new Token(Token.TokenTypes.WORD, 5, 47, "two"));
        tokens.add(new Token(Token.TokenTypes.COMMA, 5, 48));
        tokens.add(new Token(Token.TokenTypes.WORD, 5, 58, "character"));
        tokens.add(new Token(Token.TokenTypes.WORD, 5, 64, "three"));
        tokens.add(new Token(Token.TokenTypes.RPAREN, 5, 65));
        tokens.add(new Token(Token.TokenTypes.NEWLINE, 6, 0));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 34, "methodWithManyParamsAndReturns"));
        tokens.add(new Token(Token.TokenTypes.LPAREN, 6, 35));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 41, "number"));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 45, "one"));
        tokens.add(new Token(Token.TokenTypes.COMMA, 6, 46));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 53, "string"));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 57, "two"));
        tokens.add(new Token(Token.TokenTypes.COMMA, 6, 58));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 68, "character"));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 74, "three"));
        tokens.add(new Token(Token.TokenTypes.RPAREN, 6, 75));
        tokens.add(new Token(Token.TokenTypes.COLON, 6, 77));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 84, "number"));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 89, "four"));
        tokens.add(new Token(Token.TokenTypes.COMMA, 6, 90));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 97, "string"));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 102, "five"));
        tokens.add(new Token(Token.TokenTypes.COMMA, 6, 103));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 113, "character"));
        tokens.add(new Token(Token.TokenTypes.WORD, 6, 117, "six"));
        tokens.add(new Token(Token.TokenTypes.NEWLINE, 7, 0));
        tokens.add(new Token(Token.TokenTypes.NEWLINE, 8, 0));
        tokens.add(new Token(Token.TokenTypes.DEDENT, 8, 0));
        tokens.add(new Token(Token.TokenTypes.INTERFACE, 8, 9));
        tokens.add(new Token(Token.TokenTypes.WORD, 8, 23, "simpleExample"));
        tokens.add(new Token(Token.TokenTypes.NEWLINE, 9, 0));
        tokens.add(new Token(Token.TokenTypes.INDENT, 9, 4));
        tokens.add(new Token(Token.TokenTypes.WORD, 9, 14, "doesItWork"));
        tokens.add(new Token(Token.TokenTypes.LPAREN, 9, 15));
        tokens.add(new Token(Token.TokenTypes.RPAREN, 9, 16));
        tokens.add(new Token(Token.TokenTypes.NEWLINE, 10, 0));
        tokens.add(new Token(Token.TokenTypes.WORD, 10, 13, "yesItDoes"));
        tokens.add(new Token(Token.TokenTypes.LPAREN, 10, 14));
        tokens.add(new Token(Token.TokenTypes.RPAREN, 10, 15));
        tokens.add(new Token(Token.TokenTypes.NEWLINE, 11, 0));
        tokens.add(new Token(Token.TokenTypes.DEDENT, 11, 4));
        var tran = new TranNode();
        var p = new Parser(tran,tokens);
        p.Tran();
        Assertions.assertEquals(0,tran.Classes.size());
        Assertions.assertEquals(2,tran.Interfaces.size());
        Assertions.assertEquals("complexExample",tran.Interfaces.get(0).name);
        Assertions.assertEquals(5,tran.Interfaces.get(0).methods.size());
        Assertions.assertEquals("simpleMethod",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(0)).name);
        Assertions.assertEquals("methodWithParam",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(1)).name);
        Assertions.assertEquals("one",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(1)).parameters.get(0).name);
        Assertions.assertEquals("number",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(1)).parameters.get(0).type);
        Assertions.assertEquals("methodWithOneReturnValue",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(2)).name);
        Assertions.assertEquals("good",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(2)).returns.get(0).name);
        Assertions.assertEquals("number",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(2)).returns.get(0).type);
        Assertions.assertEquals("methodWithManyParams",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(3)).name);
        Assertions.assertEquals("one",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(3)).parameters.get(0).name);
        Assertions.assertEquals("number",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(3)).parameters.get(0).type);
        Assertions.assertEquals("two",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(3)).parameters.get(1).name);
        Assertions.assertEquals("string",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(3)).parameters.get(1).type);
        Assertions.assertEquals("three",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(3)).parameters.get(2).name);
        Assertions.assertEquals("character",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(3)).parameters.get(2).type);
        Assertions.assertEquals("methodWithManyParamsAndReturns",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).name);
        Assertions.assertEquals("four",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).returns.get(0).name);
        Assertions.assertEquals("number",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).returns.get(0).type);
        Assertions.assertEquals("five",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).returns.get(1).name);
        Assertions.assertEquals("string",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).returns.get(1).type);
        Assertions.assertEquals("six",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).returns.get(2).name);
        Assertions.assertEquals("character",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).returns.get(2).type);
        Assertions.assertEquals("one",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).parameters.get(0).name);
        Assertions.assertEquals("number",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).parameters.get(0).type);
        Assertions.assertEquals("two",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).parameters.get(1).name);
        Assertions.assertEquals("string",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).parameters.get(1).type);
        Assertions.assertEquals("three",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).parameters.get(2).name);
        Assertions.assertEquals("character",((MethodHeaderNode)tran.Interfaces.get(0).methods.get(4)).parameters.get(2).type);
        Assertions.assertEquals("simpleExample",tran.Interfaces.get(1).name);
        Assertions.assertEquals(2,tran.Interfaces.get(1).methods.size());
        Assertions.assertEquals("doesItWork",((MethodHeaderNode)tran.Interfaces.get(1).methods.get(0)).name);
        Assertions.assertEquals("yesItDoes",((MethodHeaderNode)tran.Interfaces.get(1).methods.get(1)).name);
    }
}
